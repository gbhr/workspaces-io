{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WorkspacesIO Better than your NAS, probably Documentation : https://workspacesio.subdavis.com/ Source Code : https://github.com/subdavis/workspacesio Key Features Non-invasive import and indexing of your existing data. We leave your data just as it is on-disk. Simple permissions management. wio create to make new workspaces. wio share to share them with others. Low-friction access to your data. WorkspacesIO grants STS credentials so that users can connect directly to minio for listing, upload, and download operations. You can even continue to use minio/mc or boto3 , with some caveats. Permissions-aware indexing and aggregation across the system. Hub-and-spoke architecture. Run a MinIO node wherever you have data, and it will be available through Workspaces. Even regular users can introduce new nodes into the system and retain full control of their data.","title":"Home"},{"location":"#workspacesio","text":"Better than your NAS, probably Documentation : https://workspacesio.subdavis.com/ Source Code : https://github.com/subdavis/workspacesio","title":"WorkspacesIO"},{"location":"#key-features","text":"Non-invasive import and indexing of your existing data. We leave your data just as it is on-disk. Simple permissions management. wio create to make new workspaces. wio share to share them with others. Low-friction access to your data. WorkspacesIO grants STS credentials so that users can connect directly to minio for listing, upload, and download operations. You can even continue to use minio/mc or boto3 , with some caveats. Permissions-aware indexing and aggregation across the system. Hub-and-spoke architecture. Run a MinIO node wherever you have data, and it will be available through Workspaces. Even regular users can introduce new nodes into the system and retain full control of their data.","title":"Key Features"},{"location":"concepts/","text":"Concepts WorkspacesIO provides web and command-line data management. MinIO (or S3) store data. Elasticsearch + a python crawler provide indexing Filestash provides web based data management A FastAPI + SQLAlchemy service keeps track of permissions and acts as a broker for STS credentials. Models Storage Node A storage node is a storage backend, such as a single MinIO instance or AWS S3 account. Any system user can add a new storage node. Workspace Root A workspace root is a bucket (and optional prefix) within a storage backend where WorkspacesIO is responsible for managing data. public and private type roots must be used exclusively with workspaces . They rely on a prefix naming convention that is primarily an optimization for IAM Policy generation. A user's private workspaces can be placed in any private root. A user's public workspaces can be placed in any public root. unmanaged roots, which are ideal for mapping existing data into workspaces. Unmanaged roots can contain workspaces as well as data not managed by WorkspacesIO. Workspaces inside of unmanaged roots have no special properties: they can be shared and edited. Workspace A workspace is location (prefix) in an s3 bucket managed by WorkspacesIO. Users can create workspaces, upload data to them, share them, and index them. Individual objects can be shared read-only using pre-signed URLs, but WorkspacesIO is intended primarily for managing permissions for data collections, not individual data objects, similar to seafile. Authorization process What happens when you try to list a directory or upload a file? wio mc ls workspacename/ A request is made to the WorkspacesIO backend token search endpoint, containing the arguments to ls WorkspacesIO identifies workspacename/ as a valid workspace name, and searches for matching STS credentials. If valid credentials aren't found, the backend issues an STS AssumeRole to the storage node backend, which results in an AccessKey , SecretKey , and SessionToken . The backend caches these credentials, which were generated specially for workspacename/ , and passes them back to the client The client passes these credentials to MinIO Client ( mc ) through environment variables. Roadmap I still don't know how root-permissions will work. What determines which users are permitted create privileges on a particular root? How can a group of users all be root managers? For now, all public and private roots have global create permissions. Unmanaged roots have no create permissions, and workspaces in these roots must be crated or imported by the root's node operator. Implement indexes at the root level. Workspaces are only indexed by virtue of which root they're in. A server could theoretically have different levels of indexing on different roots, allowing users to allocate their workspaces based on the level of indexing they need. Implement quotas at multiple levels. Users have an overall quota, a root-specific quota, and a workspace quota. Quotas could be unique to individual users. QUOTAS are not enforceable while a user holds a token. If a user exceeds their quota, this will be noticed later by the notifier and future credentials requests will be blocked. If it's not obvious by now, this system has a low tolerence/defense for bad faith actors. Quotas are tools for systems administrators to prevent users from accidentally crippling resourcs. To really implement quotas and share revokes, some kind of layer 7 middleware would be necessary in front of minio. You'd literall have to implement an http proxy to inspect every request's token headers. That sounds exhausting. I'd do it with something like https://github.com/elazarl/goproxy","title":"Concepts"},{"location":"concepts/#concepts","text":"WorkspacesIO provides web and command-line data management. MinIO (or S3) store data. Elasticsearch + a python crawler provide indexing Filestash provides web based data management A FastAPI + SQLAlchemy service keeps track of permissions and acts as a broker for STS credentials.","title":"Concepts"},{"location":"concepts/#models","text":"","title":"Models"},{"location":"concepts/#storage-node","text":"A storage node is a storage backend, such as a single MinIO instance or AWS S3 account. Any system user can add a new storage node.","title":"Storage Node"},{"location":"concepts/#workspace-root","text":"A workspace root is a bucket (and optional prefix) within a storage backend where WorkspacesIO is responsible for managing data. public and private type roots must be used exclusively with workspaces . They rely on a prefix naming convention that is primarily an optimization for IAM Policy generation. A user's private workspaces can be placed in any private root. A user's public workspaces can be placed in any public root. unmanaged roots, which are ideal for mapping existing data into workspaces. Unmanaged roots can contain workspaces as well as data not managed by WorkspacesIO. Workspaces inside of unmanaged roots have no special properties: they can be shared and edited.","title":"Workspace Root"},{"location":"concepts/#workspace","text":"A workspace is location (prefix) in an s3 bucket managed by WorkspacesIO. Users can create workspaces, upload data to them, share them, and index them. Individual objects can be shared read-only using pre-signed URLs, but WorkspacesIO is intended primarily for managing permissions for data collections, not individual data objects, similar to seafile.","title":"Workspace"},{"location":"concepts/#authorization-process","text":"What happens when you try to list a directory or upload a file? wio mc ls workspacename/ A request is made to the WorkspacesIO backend token search endpoint, containing the arguments to ls WorkspacesIO identifies workspacename/ as a valid workspace name, and searches for matching STS credentials. If valid credentials aren't found, the backend issues an STS AssumeRole to the storage node backend, which results in an AccessKey , SecretKey , and SessionToken . The backend caches these credentials, which were generated specially for workspacename/ , and passes them back to the client The client passes these credentials to MinIO Client ( mc ) through environment variables.","title":"Authorization process"},{"location":"concepts/#roadmap","text":"I still don't know how root-permissions will work. What determines which users are permitted create privileges on a particular root? How can a group of users all be root managers? For now, all public and private roots have global create permissions. Unmanaged roots have no create permissions, and workspaces in these roots must be crated or imported by the root's node operator. Implement indexes at the root level. Workspaces are only indexed by virtue of which root they're in. A server could theoretically have different levels of indexing on different roots, allowing users to allocate their workspaces based on the level of indexing they need. Implement quotas at multiple levels. Users have an overall quota, a root-specific quota, and a workspace quota. Quotas could be unique to individual users. QUOTAS are not enforceable while a user holds a token. If a user exceeds their quota, this will be noticed later by the notifier and future credentials requests will be blocked. If it's not obvious by now, this system has a low tolerence/defense for bad faith actors. Quotas are tools for systems administrators to prevent users from accidentally crippling resourcs. To really implement quotas and share revokes, some kind of layer 7 middleware would be necessary in front of minio. You'd literall have to implement an http proxy to inspect every request's token headers. That sounds exhausting. I'd do it with something like https://github.com/elazarl/goproxy","title":"Roadmap"},{"location":"design/","text":"Design This document will explore some of the design choices that went into WorkspacesIO. Goal WorkspacesIO provides intuitive object storage, indexing, artifact generation, and data lifecycle management using the very best open source tooling available given the constraints of role-based access control. When possible, WorkspacesIO should provide thin wrapping around existing tools or defer completely in order to provide more power to users. Code Quality and Maintainability These are the guiding values of WorkspacesIO. Use modern, typeful python style that any python developer could understand. Use excellent linting and testing practices to catch problems early. Keep your footprint small, and defer as much complex functionality to MinIO/ElasticSearc/Filestash as possible. Risk WorkspacesIO does not protect consumers from the API surfaces of its composite stack, MinIO and ElasticSearch in particular. Significant changes in the feature offerings of these tools could cause instability for WorkspacesIO users. Through this added power, users are also less protected. Users should consider this a feature. MinIO and Elastic Co have shown themselves to be more technically competent, more user-focused, and better stuards of open-source than the companies behind any of the alternatives below. Data Storage Alternatives Some off-the-shelf data storage solutions would be better for sync/search, but provide poor experience for highly technical end users. No decent command line options, inability to map over existing data volumes, and comparably poor performance are some major issues we want to address. NextCloud Seafile Pydio Cells Everything else is over-specialized. Indexing Alternatives WorkspacesIO does not seek to compete with indexing tools like those listed below. These tools are great at indexing documents, but they are destructive . They insist on owning the documents they index rather than mapping over existing file structures, making them unsuitable for many users. Only Mayan provides access control. Mayan EDMS Paperless Lodestone WorkspacesIO will provide some degree of full text search, hopefully comparable to what seafile provides, but it is not an EDMS. Stack Each component of the stack was chosen for its history and stability among other open source offerings. This stack is intended to mitigate above noted risk. ElasticSearch is peerless. MinIO provides exceptional value to end users by making WorkspacesIO instantly compatible with tons of existing S3 tooling. OpenID Connect via KeyCloak and Auth0 provides flexibility for integration in existing auth realms. Postgres + SQLAlchemy provides a typed ORM with excellent community support. Minimal frontend uses a more experimental stack that promises to be easy to understand for contributors and sustainable for many years. TypeScript Vue 3 Vite Tailwind CSS","title":"Design"},{"location":"design/#design","text":"This document will explore some of the design choices that went into WorkspacesIO.","title":"Design"},{"location":"design/#goal","text":"WorkspacesIO provides intuitive object storage, indexing, artifact generation, and data lifecycle management using the very best open source tooling available given the constraints of role-based access control. When possible, WorkspacesIO should provide thin wrapping around existing tools or defer completely in order to provide more power to users.","title":"Goal"},{"location":"design/#code-quality-and-maintainability","text":"These are the guiding values of WorkspacesIO. Use modern, typeful python style that any python developer could understand. Use excellent linting and testing practices to catch problems early. Keep your footprint small, and defer as much complex functionality to MinIO/ElasticSearc/Filestash as possible.","title":"Code Quality and Maintainability"},{"location":"design/#risk","text":"WorkspacesIO does not protect consumers from the API surfaces of its composite stack, MinIO and ElasticSearch in particular. Significant changes in the feature offerings of these tools could cause instability for WorkspacesIO users. Through this added power, users are also less protected. Users should consider this a feature. MinIO and Elastic Co have shown themselves to be more technically competent, more user-focused, and better stuards of open-source than the companies behind any of the alternatives below.","title":"Risk"},{"location":"design/#data-storage-alternatives","text":"Some off-the-shelf data storage solutions would be better for sync/search, but provide poor experience for highly technical end users. No decent command line options, inability to map over existing data volumes, and comparably poor performance are some major issues we want to address. NextCloud Seafile Pydio Cells Everything else is over-specialized.","title":"Data Storage Alternatives"},{"location":"design/#indexing-alternatives","text":"WorkspacesIO does not seek to compete with indexing tools like those listed below. These tools are great at indexing documents, but they are destructive . They insist on owning the documents they index rather than mapping over existing file structures, making them unsuitable for many users. Only Mayan provides access control. Mayan EDMS Paperless Lodestone WorkspacesIO will provide some degree of full text search, hopefully comparable to what seafile provides, but it is not an EDMS.","title":"Indexing Alternatives"},{"location":"design/#stack","text":"Each component of the stack was chosen for its history and stability among other open source offerings. This stack is intended to mitigate above noted risk. ElasticSearch is peerless. MinIO provides exceptional value to end users by making WorkspacesIO instantly compatible with tons of existing S3 tooling. OpenID Connect via KeyCloak and Auth0 provides flexibility for integration in existing auth realms. Postgres + SQLAlchemy provides a typed ORM with excellent community support. Minimal frontend uses a more experimental stack that promises to be easy to understand for contributors and sustainable for many years. TypeScript Vue 3 Vite Tailwind CSS","title":"Stack"},{"location":"admin/administrator-guide/","text":"Server Administrator Guide Getting Started WorkspacesIO is an OpenID Oauth2 application. It should support most OpenID auth providers. Auth0 (recommended) Google (tested) You'll need to create an OAuth app if you intend to use more than the defalt root admin user. MinIO Setup A minio root account cannot be used to create a Storage because it cannot be used for STS assume role. Create a new user. # Create alias mc alias set mybackend http://localhost:9000 minio minio1234 # Create user mc admin user add mybackend backend backend1234 # Give user access to all buckets mc admin policy set mybackend readwrite user=backend Server Config Place an .env file in docker/ with these variables. ENV Name Default description WIO_PUBLIC_NAME http://localhost:8100/ The public name of the workspaces server that clients can use WIO_DATABASE_URL postgresql:///wio postgres connection string WIO_SECRET fast hashing secret for sessions and other needs WIO_ES_NODES [\"http://localhost:9200\"] JSON array of elasticsearch nodes WIO_OIDC_NAME auth0 OpenID Connect provider WIO_OIDC_CLIENT_ID none OpenID Connect client id WIO_OIDC_CLIENT_SECRET none OpenID Connect client secret WIO_OIDC_WELL_KNOWN none OpenID Connect well known discovery endpoint WIO_OIDC_ALGOS [\"RS256\"] JSON array of algos to use ...plus any configuration that FastAPI takes by default. Docker cd docker/ docker-compose up -d Initialize the stack by running through the commands in initialize.sh . Debugging https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME PYTHONPROFILEIMPORTTIME=1 wio","title":"Administrator Guide"},{"location":"admin/administrator-guide/#server-administrator-guide","text":"","title":"Server Administrator Guide"},{"location":"admin/administrator-guide/#getting-started","text":"WorkspacesIO is an OpenID Oauth2 application. It should support most OpenID auth providers. Auth0 (recommended) Google (tested) You'll need to create an OAuth app if you intend to use more than the defalt root admin user.","title":"Getting Started"},{"location":"admin/administrator-guide/#minio-setup","text":"A minio root account cannot be used to create a Storage because it cannot be used for STS assume role. Create a new user. # Create alias mc alias set mybackend http://localhost:9000 minio minio1234 # Create user mc admin user add mybackend backend backend1234 # Give user access to all buckets mc admin policy set mybackend readwrite user=backend","title":"MinIO Setup"},{"location":"admin/administrator-guide/#server-config","text":"Place an .env file in docker/ with these variables. ENV Name Default description WIO_PUBLIC_NAME http://localhost:8100/ The public name of the workspaces server that clients can use WIO_DATABASE_URL postgresql:///wio postgres connection string WIO_SECRET fast hashing secret for sessions and other needs WIO_ES_NODES [\"http://localhost:9200\"] JSON array of elasticsearch nodes WIO_OIDC_NAME auth0 OpenID Connect provider WIO_OIDC_CLIENT_ID none OpenID Connect client id WIO_OIDC_CLIENT_SECRET none OpenID Connect client secret WIO_OIDC_WELL_KNOWN none OpenID Connect well known discovery endpoint WIO_OIDC_ALGOS [\"RS256\"] JSON array of algos to use ...plus any configuration that FastAPI takes by default.","title":"Server Config"},{"location":"admin/administrator-guide/#docker","text":"cd docker/ docker-compose up -d Initialize the stack by running through the commands in initialize.sh .","title":"Docker"},{"location":"admin/administrator-guide/#debugging","text":"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME PYTHONPROFILEIMPORTTIME=1 wio","title":"Debugging"},{"location":"admin/s3/","text":"AWS S3 Workspaces This section will only cover the parts of node and root configuration that are different from MinIO. S3 is more complicated than MinIO because some configuration must be done in AWS Console before you configure your root. AWS Console config You will need An aws account An s3 bucket An IAM user with... full permissions to your bucket permissions to perfor STS assume role. AWS credentials for that user , not your root account. Your IAM policy for STS should look something like this. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"sts:GetSessionToken\", \"sts:DecodeAuthorizationMessage\", \"sts:GetAccessKeyInfo\", \"sts:GetCallerIdentity\", \"sts:GetServiceBearerToken\" ], \"Resource\": \"*\" }, { \"Sid\": \"VisualEditor1\", \"Effect\": \"Allow\", \"Action\": \"sts:*\", \"Resource\": [ \"arn:aws:iam::*:user/*\", \"<ROLE_ARN>\" ] } ] } Your IAM policy for S3 should look something like this { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:PutAnalyticsConfiguration\", \"s3:GetObjectVersionTagging\", \"s3:DeleteAccessPoint\", \"s3:CreateBucket\", \"s3:ReplicateObject\", \"s3:GetObjectAcl\", \"s3:GetBucketObjectLockConfiguration\", \"s3:DeleteBucketWebsite\", \"s3:PutLifecycleConfiguration\", \"s3:GetObjectVersionAcl\", \"s3:HeadBucket\", \"s3:DeleteObject\", \"s3:GetBucketPolicyStatus\", \"s3:GetObjectRetention\", \"s3:GetBucketWebsite\", \"s3:GetJobTagging\", \"s3:ListJobs\", \"s3:PutReplicationConfiguration\", \"s3:PutObjectLegalHold\", \"s3:GetObjectLegalHold\", \"s3:GetBucketNotification\", \"s3:PutBucketCORS\", \"s3:GetReplicationConfiguration\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:GetObject\", \"s3:PutBucketNotification\", \"s3:DescribeJob\", \"s3:PutBucketLogging\", \"s3:GetAnalyticsConfiguration\", \"s3:PutBucketObjectLockConfiguration\", \"s3:GetObjectVersionForReplication\", \"s3:CreateJob\", \"s3:CreateAccessPoint\", \"s3:GetLifecycleConfiguration\", \"s3:GetAccessPoint\", \"s3:GetInventoryConfiguration\", \"s3:GetBucketTagging\", \"s3:PutAccelerateConfiguration\", \"s3:DeleteObjectVersion\", \"s3:GetBucketLogging\", \"s3:ListBucketVersions\", \"s3:RestoreObject\", \"s3:ListBucket\", \"s3:GetAccelerateConfiguration\", \"s3:GetBucketPolicy\", \"s3:PutEncryptionConfiguration\", \"s3:GetEncryptionConfiguration\", \"s3:GetObjectVersionTorrent\", \"s3:AbortMultipartUpload\", \"s3:GetBucketRequestPayment\", \"s3:GetAccessPointPolicyStatus\", \"s3:UpdateJobPriority\", \"s3:GetObjectTagging\", \"s3:GetMetricsConfiguration\", \"s3:DeleteBucket\", \"s3:PutBucketVersioning\", \"s3:GetBucketPublicAccessBlock\", \"s3:ListBucketMultipartUploads\", \"s3:ListAccessPoints\", \"s3:PutMetricsConfiguration\", \"s3:UpdateJobStatus\", \"s3:GetBucketVersioning\", \"s3:GetBucketAcl\", \"s3:PutInventoryConfiguration\", \"s3:GetObjectTorrent\", \"s3:GetAccountPublicAccessBlock\", \"s3:PutBucketWebsite\", \"s3:ListAllMyBuckets\", \"s3:PutBucketRequestPayment\", \"s3:PutObjectRetention\", \"s3:GetBucketCORS\", \"s3:GetBucketLocation\", \"s3:GetAccessPointPolicy\", \"s3:ReplicateDelete\", \"s3:GetObjectVersion\" ], \"Resource\": \"*\" } ] } Node configuration wio node create <node_name> \\ --sts-api-url https://sts.amazonaws.com \\ --region-name <region> \\ --role-arn <role-ARN> \\ https://s3.us-east-1.amazonaws.com \\ ACCESS_KEY_ID \\ SECRET_KEY_ID Next, we configure buckets to act as workspace roots. wio root create \\ --root-type public --base-path public_base_path/ \\ <bucket_name> <node_name> Base path is optional but necessary if you want to put multiple roots into the same bucket, such as both public and private. If you want to map existing S3 data into workspaces, the process is the same as in MinIO.","title":"S3 guide"},{"location":"admin/s3/#aws-s3-workspaces","text":"This section will only cover the parts of node and root configuration that are different from MinIO. S3 is more complicated than MinIO because some configuration must be done in AWS Console before you configure your root.","title":"AWS S3 Workspaces"},{"location":"admin/s3/#aws-console-config","text":"You will need An aws account An s3 bucket An IAM user with... full permissions to your bucket permissions to perfor STS assume role. AWS credentials for that user , not your root account. Your IAM policy for STS should look something like this. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"sts:GetSessionToken\", \"sts:DecodeAuthorizationMessage\", \"sts:GetAccessKeyInfo\", \"sts:GetCallerIdentity\", \"sts:GetServiceBearerToken\" ], \"Resource\": \"*\" }, { \"Sid\": \"VisualEditor1\", \"Effect\": \"Allow\", \"Action\": \"sts:*\", \"Resource\": [ \"arn:aws:iam::*:user/*\", \"<ROLE_ARN>\" ] } ] } Your IAM policy for S3 should look something like this { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"s3:PutAnalyticsConfiguration\", \"s3:GetObjectVersionTagging\", \"s3:DeleteAccessPoint\", \"s3:CreateBucket\", \"s3:ReplicateObject\", \"s3:GetObjectAcl\", \"s3:GetBucketObjectLockConfiguration\", \"s3:DeleteBucketWebsite\", \"s3:PutLifecycleConfiguration\", \"s3:GetObjectVersionAcl\", \"s3:HeadBucket\", \"s3:DeleteObject\", \"s3:GetBucketPolicyStatus\", \"s3:GetObjectRetention\", \"s3:GetBucketWebsite\", \"s3:GetJobTagging\", \"s3:ListJobs\", \"s3:PutReplicationConfiguration\", \"s3:PutObjectLegalHold\", \"s3:GetObjectLegalHold\", \"s3:GetBucketNotification\", \"s3:PutBucketCORS\", \"s3:GetReplicationConfiguration\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:GetObject\", \"s3:PutBucketNotification\", \"s3:DescribeJob\", \"s3:PutBucketLogging\", \"s3:GetAnalyticsConfiguration\", \"s3:PutBucketObjectLockConfiguration\", \"s3:GetObjectVersionForReplication\", \"s3:CreateJob\", \"s3:CreateAccessPoint\", \"s3:GetLifecycleConfiguration\", \"s3:GetAccessPoint\", \"s3:GetInventoryConfiguration\", \"s3:GetBucketTagging\", \"s3:PutAccelerateConfiguration\", \"s3:DeleteObjectVersion\", \"s3:GetBucketLogging\", \"s3:ListBucketVersions\", \"s3:RestoreObject\", \"s3:ListBucket\", \"s3:GetAccelerateConfiguration\", \"s3:GetBucketPolicy\", \"s3:PutEncryptionConfiguration\", \"s3:GetEncryptionConfiguration\", \"s3:GetObjectVersionTorrent\", \"s3:AbortMultipartUpload\", \"s3:GetBucketRequestPayment\", \"s3:GetAccessPointPolicyStatus\", \"s3:UpdateJobPriority\", \"s3:GetObjectTagging\", \"s3:GetMetricsConfiguration\", \"s3:DeleteBucket\", \"s3:PutBucketVersioning\", \"s3:GetBucketPublicAccessBlock\", \"s3:ListBucketMultipartUploads\", \"s3:ListAccessPoints\", \"s3:PutMetricsConfiguration\", \"s3:UpdateJobStatus\", \"s3:GetBucketVersioning\", \"s3:GetBucketAcl\", \"s3:PutInventoryConfiguration\", \"s3:GetObjectTorrent\", \"s3:GetAccountPublicAccessBlock\", \"s3:PutBucketWebsite\", \"s3:ListAllMyBuckets\", \"s3:PutBucketRequestPayment\", \"s3:PutObjectRetention\", \"s3:GetBucketCORS\", \"s3:GetBucketLocation\", \"s3:GetAccessPointPolicy\", \"s3:ReplicateDelete\", \"s3:GetObjectVersion\" ], \"Resource\": \"*\" } ] }","title":"AWS Console config"},{"location":"admin/s3/#node-configuration","text":"wio node create <node_name> \\ --sts-api-url https://sts.amazonaws.com \\ --region-name <region> \\ --role-arn <role-ARN> \\ https://s3.us-east-1.amazonaws.com \\ ACCESS_KEY_ID \\ SECRET_KEY_ID Next, we configure buckets to act as workspace roots. wio root create \\ --root-type public --base-path public_base_path/ \\ <bucket_name> <node_name> Base path is optional but necessary if you want to put multiple roots into the same bucket, such as both public and private. If you want to map existing S3 data into workspaces, the process is the same as in MinIO.","title":"Node configuration"},{"location":"user-guide/getting-started/","text":"User Getting Started Guide This section is intended as a user guide and assumes you have a running server . See the server config docs for help getting an instance running. WorkspacesIO has a web app for file browsing, search, etc. All administrative tasks and config are done through the wio cli. Installation # with pip pip install workspacesio-cli # with pipx pipx install workspacesio-cli # verify installation wio --version Client configuration To get an API token for the cli, visit http(s)://yourserver.com/app/ and visit the token section. wio --api-url http://yourserver.com/api \\ login \\ --access-key {access_key} \\ --secret-key {secret_key} Verify the login. wio info Note the location of your configuration file. Your credentials are stored unencrypted. Common commands # Show the help wio --help # Show subcommand help wio <command> --help # List your workspaces wio workspace ls # List your nodes wio node ls Managing workspaces","title":"Getting Started"},{"location":"user-guide/getting-started/#user-getting-started-guide","text":"This section is intended as a user guide and assumes you have a running server . See the server config docs for help getting an instance running. WorkspacesIO has a web app for file browsing, search, etc. All administrative tasks and config are done through the wio cli.","title":"User Getting Started Guide"},{"location":"user-guide/getting-started/#installation","text":"# with pip pip install workspacesio-cli # with pipx pipx install workspacesio-cli # verify installation wio --version","title":"Installation"},{"location":"user-guide/getting-started/#client-configuration","text":"To get an API token for the cli, visit http(s)://yourserver.com/app/ and visit the token section. wio --api-url http://yourserver.com/api \\ login \\ --access-key {access_key} \\ --secret-key {secret_key} Verify the login. wio info Note the location of your configuration file. Your credentials are stored unencrypted.","title":"Client configuration"},{"location":"user-guide/getting-started/#common-commands","text":"# Show the help wio --help # Show subcommand help wio <command> --help # List your workspaces wio workspace ls # List your nodes wio node ls","title":"Common commands"},{"location":"user-guide/getting-started/#managing-workspaces","text":"","title":"Managing workspaces"}]}